{"version":3,"sources":["meteor://ðŸ’»app/imports/startup/both/index.js","meteor://ðŸ’»app/imports/startup/server/index.js","meteor://ðŸ’»app/imports/api/powerbox.js","meteor://ðŸ’»app/server/main.js"],"names":["module","link","Meteor","v","headers","Axios","default","accessToken","sessionId","urlRegex","isServer","methods","claimToken","self","console","log","get","getAccessToken","proxyParsed","process","env","HTTP_PROXY","match","requestData","JSON","stringify","resData","proxy","protocol","host","port","Number","method","url","data","then","response","cap","catch","error"],"mappings":";;;;;;;;AAAA;AACA,wC;;;;;;;;;;;ACDAA,MAAM,CAACC,IAAP,CAAY,uBAAZ;AAAqCD,MAAM,CAACC,IAAP,CAAY,yBAAZ;AAAuCD,MAAM,CAACC,IAAP,CAAY,uBAAZ,E;;;;;;;;;;;ACA5E,IAAIC,MAAJ;AAAWF,MAAM,CAACC,IAAP,CAAY,eAAZ,EAA4B;AAACC,QAAM,CAACC,CAAD,EAAG;AAACD,UAAM,GAACC,CAAP;AAAS;;AAApB,CAA5B,EAAkD,CAAlD;AAAqD,IAAIC,OAAJ;AAAYJ,MAAM,CAACC,IAAP,CAAY,0BAAZ,EAAuC;AAACG,SAAO,CAACD,CAAD,EAAG;AAACC,WAAO,GAACD,CAAR;AAAU;;AAAtB,CAAvC,EAA+D,CAA/D;AAAkE,IAAIE,KAAJ;AAAUL,MAAM,CAACC,IAAP,CAAY,OAAZ,EAAoB;AAACK,SAAO,CAACH,CAAD,EAAG;AAACE,SAAK,GAACF,CAAN;AAAQ;;AAApB,CAApB,EAA0C,CAA1C;AAIxJ,IAAII,WAAJ;AACA,IAAIC,SAAJ;AACA,MAAMC,QAAQ,GAAG,uCAAjB;;AAEA,IAAIP,MAAM,CAACQ,QAAX,EAAqB;AACpBR,QAAM,CAACS,OAAP,CAAe;AACd,iCAA6BC,UAA7B,EAAyC;AACxC,YAAMC,IAAI,GAAG,IAAb;AACAC,aAAO,CAACC,GAAR,wBAA4BH,UAA5B;AACAJ,eAAS,GAAGJ,OAAO,CAACY,GAAR,CAAYH,IAAZ,EAAkB,wBAAlB,CAAZ;AACAC,aAAO,CAACC,GAAR,uBAA2BP,SAA3B;;AACA,UAAIN,MAAM,CAACQ,QAAX,EAAqB;AACpBO,sBAAc,CAACL,UAAD,CAAd;AACA,OAFD,MAEO;AACNE,eAAO,CAACC,GAAR,CAAY,sBAAZ;AACA;AACD;;AAXa,GAAf;AAaA;;AAED,SAASE,cAAT,CAAwBL,UAAxB,EAAoC;AACnC,QAAMM,WAAW,GAAGC,OAAO,CAACC,GAAR,CAAYC,UAAZ,CAAuBC,KAAvB,CAA6Bb,QAA7B,CAApB;AACA,QAAMc,WAAW,GAAGC,IAAI,CAACC,SAAL,CAAe;AAClC,oBAAgBb,UADkB;AAElC,2BAAuB;AAFW,GAAf,CAApB;AAIA,MAAIc,OAAO,GAAG,EAAd;AACArB,OAAK,CAAC;AACDsB,SAAK,EAAE;AACLC,cAAQ,EAAEV,WAAW,CAAC,CAAD,CADhB;AAELW,UAAI,EAAEX,WAAW,CAAC,CAAD,CAFZ;AAGLY,UAAI,EAAEC,MAAM,CAACb,WAAW,CAAC,CAAD,CAAZ;AAHP,KADN;AAMDc,UAAM,EAAE,MANP;AAODC,OAAG,uCAAgCzB,SAAhC,WAPF;AAQD0B,QAAI,EAAE;AACJ,sBAAgBtB,UADZ;AAEJ,6BAAuB;AAFnB;AARL,GAAD,CAAL,CAaIuB,IAbJ,CAaS,UAASC,QAAT,EAAmB;AACvBtB,WAAO,CAACC,GAAR,CAAY,sBAAZ;AACAD,WAAO,CAACC,GAAR,CAAYqB,QAAQ,CAACF,IAArB;AACA3B,eAAW,GAAG6B,QAAQ,CAACF,IAAT,CAAcG,GAA5B;AACD,GAjBJ,EAkBIC,KAlBJ,CAkBWC,KAAD,IAAW;AAACzB,WAAO,CAACyB,KAAR,CAAcA,KAAd;AAAqB,GAlB3C;AAoBA,C;;;;;;;;;;;ACnDDvC,MAAM,CAACC,IAAP,CAAY,yBAAZ;AAAuCD,MAAM,CAACC,IAAP,CAAY,uBAAZ,E","file":"/app.js","sourcesContent":["// Import modules used by both client and server through a single index entry point\n// e.g. useraccounts configuration file.\n","// Import server startup through a single index entry point\n\nimport '/imports/startup/both';\nimport '/imports/startup/server';\nimport '/imports/api/powerbox';","import { Meteor } from 'meteor/meteor';\nimport { headers } from 'meteor/gadicohen:headers';\nimport Axios from 'axios';\n\nvar accessToken;\nvar sessionId;\nconst urlRegex = /([a-z0-9]+):\\/\\/([a-z0-9\\.]+):([\\d]+)/;\n\nif (Meteor.isServer) {\n\tMeteor.methods({\n\t\t\"sandstorm.submitClaimToken\"(claimToken) {\n\t\t\tconst self = this;\n\t\t\tconsole.log(`claimToken = ${claimToken}`);\n\t\t\tsessionId = headers.get(self, 'x-sandstorm-session-id');\n\t\t\tconsole.log(`sessionId = ${sessionId}`);\n\t\t\tif (Meteor.isServer) {\n\t\t\t\tgetAccessToken(claimToken);\n\t\t\t} else {\n\t\t\t\tconsole.log('getting access token')\n\t\t\t}\n\t\t}\n\t})\n}\n\nfunction getAccessToken(claimToken) {\n\tconst proxyParsed = process.env.HTTP_PROXY.match(urlRegex);\n\tconst requestData = JSON.stringify({\n\t\t\"requestToken\": claimToken,\n\t\t\"requiredPermissions\": [],\n\t});\n\tvar resData = \"\";\n\tAxios({\n      proxy: {\n        protocol: proxyParsed[1],\n        host: proxyParsed[2],\n        port: Number(proxyParsed[3]),\n      },\n      method: \"POST\",\n      url: `http://http-bridge/session/${sessionId}/claim`,\n      data: {\n        \"requestToken\": claimToken,\n        \"requiredPermissions\": [],\n      }\n    })\n    .then(function(response) {\n      console.log('setting access token');\n      console.log(response.data);\n      accessToken = response.data.cap;\n    })\n    .catch((error) => {console.error(error)})\n\n}","// Server entry point, imports all server code\n\nimport '/imports/startup/server';\nimport '/imports/startup/both';\n"]}