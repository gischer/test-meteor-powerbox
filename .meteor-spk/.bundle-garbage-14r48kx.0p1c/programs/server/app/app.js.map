{"version":3,"sources":["meteor://ðŸ’»app/imports/startup/both/index.js","meteor://ðŸ’»app/imports/startup/server/index.js","meteor://ðŸ’»app/imports/api/powerbox.js","meteor://ðŸ’»app/server/main.js"],"names":["module","link","Meteor","v","headers","http","default","accessToken","sessionId","urlRegex","isServer","methods","claimToken","self","console","log","get","getAccessToken","proxyParsed","process","env","HTTP_PROXY","match","requestData","Json","stringify","resData","options","host","port","Number","method","path","req","request","res","setEncoding","on","error","chunk","cap"],"mappings":";;;;;;;;AAAA;AACA,wC;;;;;;;;;;;ACDAA,MAAM,CAACC,IAAP,CAAY,uBAAZ;AAAqCD,MAAM,CAACC,IAAP,CAAY,yBAAZ;AAAuCD,MAAM,CAACC,IAAP,CAAY,uBAAZ,E;;;;;;;;;;;ACA5E,IAAIC,MAAJ;AAAWF,MAAM,CAACC,IAAP,CAAY,eAAZ,EAA4B;AAACC,QAAM,CAACC,CAAD,EAAG;AAACD,UAAM,GAACC,CAAP;AAAS;;AAApB,CAA5B,EAAkD,CAAlD;AAAqD,IAAIC,OAAJ;AAAYJ,MAAM,CAACC,IAAP,CAAY,0BAAZ,EAAuC;AAACG,SAAO,CAACD,CAAD,EAAG;AAACC,WAAO,GAACD,CAAR;AAAU;;AAAtB,CAAvC,EAA+D,CAA/D;AAAkE,IAAIE,IAAJ;AAASL,MAAM,CAACC,IAAP,CAAY,MAAZ,EAAmB;AAACK,SAAO,CAACH,CAAD,EAAG;AAACE,QAAI,GAACF,CAAL;AAAO;;AAAnB,CAAnB,EAAwC,CAAxC;AAIvJ,IAAII,WAAJ;AACA,IAAIC,SAAJ;AACA,MAAMC,QAAQ,GAAG,uCAAjB;;AAEA,IAAIP,MAAM,CAACQ,QAAX,EAAqB;AACpBR,QAAM,CAACS,OAAP,CAAe;AACd,iCAA6BC,UAA7B,EAAyC;AACxC,YAAMC,IAAI,GAAG,IAAb;AACAC,aAAO,CAACC,GAAR,wBAA4BH,UAA5B;AACAJ,eAAS,GAAGJ,OAAO,CAACY,GAAR,CAAYH,IAAZ,EAAkB,wBAAlB,CAAZ;AACAC,aAAO,CAACC,GAAR,uBAA2BP,SAA3B;AACA;AACH;AACA;AACA;AACA;AACA;AACA;AACG;;AAba,GAAf;AAeA;;AAED,SAASS,cAAT,CAAwBL,UAAxB,EAAoC;AACnC,QAAMM,WAAW,GAAGC,OAAO,CAACC,GAAR,CAAYC,UAAZ,CAAuBC,KAAvB,CAA6Bb,QAA7B,CAApB;AACA,QAAMc,WAAW,GAAGC,IAAI,CAACC,SAAL,CAAe;AAClC,oBAAgBb,UADkB;AAElC,2BAAuB;AAFW,GAAf,CAApB;AAIA,MAAIc,OAAO,GAAG,EAAd;AACA,QAAMC,OAAO,GAAG;AACfC,QAAI,YAAKV,WAAW,CAAC,CAAD,CAAhB,SAAsBA,WAAW,CAAC,CAAD,CAAjC,CADW;AAEfW,QAAI,EAAEC,MAAM,CAACZ,WAAW,CAAC,CAAD,CAAZ,CAFG;AAGfa,UAAM,EAAE,MAHO;AAIfC,QAAI,uCAAgCxB,SAAhC;AAJW,GAAhB;AAMA,QAAMyB,GAAG,GAAG5B,IAAI,CAAC6B,OAAL,CAAaP,OAAb,EAAsB,UAASQ,GAAT,EAAc;AAC/CA,OAAG,CAACC,WAAJ,CAAgB,MAAhB;AACAD,OAAG,CAACE,EAAJ,CAAO,OAAP,EAAgB,UAASC,KAAT,EAAgB;AAC/BxB,aAAO,CAACC,GAAR,CAAYuB,KAAZ;AACA,KAFD;AAGAH,OAAG,CAACE,EAAJ,CAAO,MAAP,EAAe,UAAUE,KAAV,EAAiB;AAC/Bb,aAAO,GAAGA,OAAO,GAAGa,KAApB;AACA,KAFD;AAGAJ,OAAG,CAACE,EAAJ,CAAO,KAAP,EAAc,YAAY;AACzBvB,aAAO,CAACC,GAAR,CAAYW,OAAZ;AACAnB,iBAAW,GAAGmB,OAAO,CAACc,GAAtB;AACA,KAHD;AAIA,GAZW,CAAZ;AAaA,C;;;;;;;;;;;ACpDDxC,MAAM,CAACC,IAAP,CAAY,yBAAZ;AAAuCD,MAAM,CAACC,IAAP,CAAY,uBAAZ,E","file":"/app.js","sourcesContent":["// Import modules used by both client and server through a single index entry point\n// e.g. useraccounts configuration file.\n","// Import server startup through a single index entry point\n\nimport '/imports/startup/both';\nimport '/imports/startup/server';\nimport '/imports/api/powerbox';","import { Meteor } from 'meteor/meteor';\nimport { headers } from 'meteor/gadicohen:headers';\nimport http from 'http';\n\nvar accessToken;\nvar sessionId;\nconst urlRegex = /([a-z0-9]+):\\/\\/([a-z0-9\\.]+):([\\d]+)/;\n\nif (Meteor.isServer) {\n\tMeteor.methods({\n\t\t\"sandstorm.submitClaimToken\"(claimToken) {\n\t\t\tconst self = this;\n\t\t\tconsole.log(`claimToken = ${claimToken}`);\n\t\t\tsessionId = headers.get(self, 'x-sandstorm-session-id');\n\t\t\tconsole.log(`sessionId = ${sessionId}`);\n\t\t\t/*\n\t\t\tif (Meteor.isServer) {\n\t\t\t\tgetAccessToken(claimToken);\n\t\t\t} else {\n\t\t\t\tconsole.log('getting access token')\n\t\t\t}\n\t\t\t*/\n\t\t}\n\t})\n}\n\nfunction getAccessToken(claimToken) {\n\tconst proxyParsed = process.env.HTTP_PROXY.match(urlRegex);\n\tconst requestData = Json.stringify({\n\t\t\"requestToken\": claimToken,\n\t\t\"requiredPermissions\": [],\n\t});\n\tvar resData = \"\";\n\tconst options = {\n\t\thost: `${proxyParsed[0]}${proxyParsed[1]}`,\n\t\tport: Number(proxyParsed[2]),\n\t\tmethod: \"POST\",\n\t\tpath: `http://http-bridge/session/${sessionId}/claim`,\n\t};\n\tconst req = http.request(options, function(res) {\n\t\tres.setEncoding('utf8');\n\t\tres.on('error', function(error) {\n\t\t\tconsole.log(error);\n\t\t});\n\t\tres.on('data', function (chunk) {\n\t\t\tresData = resData + chunk;\n\t\t});\n\t\tres.on('end', function () {\n\t\t\tconsole.log(resData);\n\t\t\taccessToken = resData.cap;\n\t\t})\n\t})\n}","// Server entry point, imports all server code\n\nimport '/imports/startup/server';\nimport '/imports/startup/both';\n"]}